server:
  port: ${SERVER_PORT}
  servlet:
    encoding:
      charset: UTF-8
      force: true
      enabled: true
  tomcat:
    threads:
      max: 200
    accept-count: 100
    connection-timeout: 20000

spring:
  application:
    name: mtvs-application  # 애플리케이션 이름 추가
  config:
    import: optional:file:.env[.properties]
  profiles:
    active: ${SPRING_PROFILES_ACTIVE}
  main:
    allow-bean-definition-overriding: true

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}
    username: ${MYSQL_USER}
    password: ${MYSQL_PASSWORD}
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      max-lifetime: 1200000

  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MySQL8Dialect
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
        jdbc:
          batch_size: 100
        order_inserts: true
        order_updates: true
        generate_statistics: true

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
      database: ${REDIS_DB}
      timeout: 60000
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 2
          max-wait: -1

  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 10MB

  mvc:
    async:
      request-timeout: 120000

  cache:
    type: redis
    redis:
      time-to-live: 3600000
      cache-null-values: false
  cloud:
    gateway:
      mvc:
        routes:
          - id: ai_image_route
            uri: http://221.163.19.142:55508
            predicates:
              - Path=/ai/image
            filters:
              - RewritePath=/ai/image, /SD15/gen_image
              - name: RequestSize
                args:
                  maxSize: 50MB
            metadata:
              connect-timeout: 120000
              response-timeout: 120000
              allowed-methods: POST



jwt:
  secret: ${JWT_SECRET_KEY}
  expiration: ${JWT_EXPIRATION}
  refresh-token:
    expiration: ${REFRESH_TOKEN_EXPIRATION}

minio:
  url: ${MINIO_URL}
  accessKey: ${MINIO_ACCESS_KEY}
  secretKey: ${MINIO_SECRET_KEY}
  bucketName: ${MINIO_BUCKET_NAME}

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics
  endpoint:
    health:
      show-details: always    # 상세한 헬스 체크 정보 표시
    prometheus:
      enabled: true
  metrics:
    tags:
      application: mtvs-application
    distribution:
      percentiles-histogram:
        http.server.requests: true    # HTTP 요청 히스토그램 활성화

logging:
  level:
    root: ${LOG_LEVEL:INFO}  # 기본값을 INFO로 설정
    com.jjh.mtvs: ${LOG_LEVEL:INFO}
    org.springframework.web: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  file:
    name: ${LOG_PATH:./logs}/application.log
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

springdoc:
  api-docs:
    path: /api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    config-url: /api-docs/swagger-config
    urls:
      - url: /api-docs
        name: API Documentation
  packages-to-scan: com.jjh.mtvs
  paths-to-match: /api/** # 모든 경로를 원하면 /**로 변경
